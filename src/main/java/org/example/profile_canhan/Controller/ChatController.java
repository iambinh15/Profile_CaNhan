package org.example.profile_canhan.Controller;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;
import org.springframework.http.*;
import org.springframework.web.client.RestTemplate;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.util.*;

@Controller
@CrossOrigin(origins = "*")
public class ChatController {

    // üîë API KEY GEMINI
    private static final String GEMINI_API_KEY = "AIzaSyCzmlI_RK2WeT3e98JXUxS3w7pBT8tjuqQ";
    private static final String GEMINI_API =
            "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=" + GEMINI_API_KEY;

    // üß† T√≠nh c√°ch tr·ª£ l√Ω c√≤n go·ªã l√† y√™u c·∫ßu
    private static final String SYSTEM_INSTRUCTION =
            "B·∫°n l√† Tr·ª£ l√Ω AI c·ªßa Chu ƒê√¨nh B√¨nh. Tr·∫£ l·ªùi NG·∫ÆN G·ªåN, s√∫c t√≠ch, ch·ªâ n√≥i ƒëi·ªÅu quan tr·ªçng. " +
                    "Kh√¥ng n√≥i d√†i, kh√¥ng l·∫∑p l·∫°i. Lu√¥n d√πng ti·∫øng Vi·ªát th√¢n thi·ªán, t·ª± nhi√™n. N·∫øu ng∆∞·ªùi d√πng mu·ªën n√≥i ti·∫øng anh th√¨ tr·∫£ l·ªùi b·∫±ng ti·∫øng anh";

    private final RestTemplate restTemplate = new RestTemplate();
    private final ObjectMapper objectMapper = new ObjectMapper();

    // ‚ö° Khi m·ªü tr√¨nh duy·ªát => hi·ªÉn th·ªã giao di·ªán ChatBot
    @GetMapping("/")
    public String showChatPage() {
        return "cv";
        //<div th:replace="fragments/chatbot :: chatbot"></div> d√°n v√†otrang mu·ªën s·ª≠ d·ª•ng chatbot n√†y
        // => /templates/ChatBot.html
    }

        //<div th:replace="fragments/chatbot :: chatbot"></div> d√°n v√†otrang mu·ªën s·ª≠ d·ª•ng chatbot n√†y
        // => /templates/ChatBot.html
    }
    // ‚ö° API x·ª≠ l√Ω khi ng∆∞·ªùi d√πng g·ª≠i tin nh·∫Øn
    @PostMapping("/api/chat")
    @ResponseBody
    public String chat(@RequestBody String userMessage) {
        try {
            // ‚úÖ Th√¥ng tin c√° nh√¢n m·∫´u
            String personalInfo = """
                    H·ªç v√† t√™n: Chu ƒê√¨nh B√¨nh
                    Ngh·ªÅ nghi·ªáp: L·∫≠p tr√¨nh vi√™n v√† chuy√™n ch·∫°y Ads, thi·∫øt k·∫ø Website.
                    Kinh nghi·ªám: 1 nƒÉm ph√°t tri·ªÉn ·ª©ng d·ª•ng Java Spring Boot, d·ª± √°n qu√°n c√† ph√™, khu vui ch∆°i, v√† tool t·ª± ƒë·ªông h√≥a.
                    Li√™n H·ªá : 0389415404
                    D·ªãch v·ª•: Thi·∫øt k·∫ø web, ch·∫°y qu·∫£ng c√°o Facebook, x√¢y chatbot, x√¢y h·ªá th·ªëng qu·∫£n l√Ω doanh nghi·ªáp.
                    """;


            // ‚úÖ N·ªôi dung prompt g·ª≠i ƒëi
            String fullPrompt = String.format("""
                    --- H·ªí S∆† C·ª¶A B·∫†N ---
                    %s

                    --- C√ÇU H·ªéI NG∆Ø·ªúI D√ôNG ---
                    %s
                    """, personalInfo, userMessage);

            // ‚úÖ T·∫°o request g·ª≠i Gemini API
            HttpHeaders headers = new HttpHeaders();
            headers.setContentType(MediaType.APPLICATION_JSON);

            Map<String, Object> systemInstructionPart = Map.of("text", SYSTEM_INSTRUCTION);
            Map<String, Object> systemInstructionConfig = Map.of("parts", List.of(systemInstructionPart));

            Map<String, Object> userPart = Map.of("text", fullPrompt);
            Map<String, Object> userContent = Map.of("role", "user", "parts", List.of(userPart));

            Map<String, Object> generationConfig = Map.of("temperature", 0.7);

            Map<String, Object> requestBody = new HashMap<>();
            requestBody.put("systemInstruction", systemInstructionConfig);
            requestBody.put("contents", List.of(userContent));
            requestBody.put("generationConfig", generationConfig);

            HttpEntity<Map<String, Object>> entity = new HttpEntity<>(requestBody, headers);
            ResponseEntity<String> response = restTemplate.postForEntity(GEMINI_API, entity, String.class);

            // ‚úÖ X·ª≠ l√Ω ph·∫£n h·ªìi t·ª´ Gemini
            JsonNode root = objectMapper.readTree(response.getBody());
            JsonNode textNode = root.path("candidates").path(0).path("content").path("parts").path(0).path("text");

            if (textNode.isTextual()) {
                return textNode.asText();
            } else {
                JsonNode errorNode = root.path("error").path("message");
                if (errorNode.isTextual()) {
                    return "‚ùå L·ªói t·ª´ Gemini API: " + errorNode.asText();
                }
                return "‚ö†Ô∏è Kh√¥ng th·ªÉ ƒë·ªçc ph·∫£n h·ªìi t·ª´ Gemini.";
            }

        } catch (Exception e) {
            e.printStackTrace();
            return "‚ö†Ô∏è L·ªói x·ª≠ l√Ω Backend: " + e.getMessage();
        }
    }
}
